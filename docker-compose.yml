x-args: &args
  APP_FOLDER: /app
  GO_BACKEND_EXE: psychoapp
  GO_BOT_EXE: psychoapp_bot
  FRONT_BUILD_FOLDER: /app/front
  FRONT_LOCAL_FOLDER: psycho-app-admin

services:
  psychoapp_dev:
    build:
      context: .
      dockerfile: DockerfileBackend
      target: go_backend-runner
      args:
        <<: *args
    image: psychoapp-backend-dev
    depends_on:
      psychoapp_db:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env:ro
      - ./database.db:/app/database.db
      - ./migrations:/app/migrations:ro
    ports:
      - 8181:8181

  psychoapp_front_dev:
    image: psychoapp-backend-front-dev
    extends:
      service: psychoapp_dev
    depends_on:
      front_builder:
        condition: service_started
    volumes:
      - front-container:/app/front:ro
    environment:
      - FRONTEND_PATH=front

  psychoapp_bot_dev:
    build:
      context: .
      dockerfile: DockerfileBot
      target: go_bot-runner
      args:
        <<: *args
    image: psychoapp-bot-dev
    volumes:
      - ./.env:/app/.env:ro
      - ./database.db:/app/database.db
      - ./migrations:/app/migrations:ro

  # third-party images

  psychoapp_db:
    image: postgres:17-alpine
    env_file:
      - .env
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - db-volume:/var/lib/postgresql/data

  # builder images

  front_builder:
    build:
      context: .
      dockerfile: DockerfileFront
      args:
        <<: *args
    image: psychoapp-front-builder
    volumes:
      - front-container:/app/front

  backend_builder:
    build:
      context: .
      dockerfile: DockerfileBackend
      target: go_backend-builder
      args:
        <<: *args
    image: psychoapp-backend-builder

  bot_builder:
    build:
      context: .
      dockerfile: DockerfileBot
      target: go_bot-builder
      args:
        <<: *args
    image: psychoapp-bot-builder

  # prod images

  psychoapp:
    build:
      target: psychoapp-prod
      args:
        <<: *args
    image: psychoapp
    env_file:
      - .env
    environment:
      FRONTEND_PATH: build
    ports:
      - 8181:8181

  psychoapp_bot:
    build:
      target: psychoapp_bot-prod
      args:
        <<: *args
    image: psychoapp-bot
    env_file:
      - .env

volumes:
  front-container:
  db-volume: