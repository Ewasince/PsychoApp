package main

import (
	. "EnvironmentModule"
	. "StorageModule/models"
	"fmt"
	"log"
	"strconv"

	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type BotInteract string

func (i BotInteract) isSimilarTo(str string) bool {
	return string(i) == str
}
func (i BotInteract) toString() string {
	return string(i)
}

var StartCommandButton BotInteract = "start"
var NewEntryButton BotInteract = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"

var botGreating = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —Å–≤–æ–π –ö–ü–¢ –¥–Ω–µ–≤–Ω–∏–∫!"

var numericKeyboard = tg.NewReplyKeyboard(
	tg.NewKeyboardButtonRow(
		tg.NewKeyboardButton(NewEntryButton.toString()),
	),
)

func main() {
	botAPI, err := tg.NewBotAPI(Env.BOT_TOKEN)
	if err != nil {
		log.Fatal(err)
	}

	u := tg.NewUpdate(0)
	u.Timeout = 60

	updates := botAPI.GetUpdatesChan(u)

	stories := make(map[int64]*Story)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		messageCommand := update.Message.Command()
		messageText := update.Message.Text
		messageSenderId := update.Message.From.ID
		messageSender := update.Message.From.UserName

		messageChatId := update.Message.Chat.ID

		log.Printf(
			"[%s, %d] %s",
			messageSender,
			messageSenderId,
			messageText,
		)

		log.Printf(
			"[%s, %d] command: %s",
			messageSender,
			messageSenderId,
			messageCommand,
		)

		if StartCommandButton.isSimilarTo(messageCommand) {
			msg := tg.NewMessage(messageChatId, botGreating)
			msg.ReplyMarkup = numericKeyboard

			if _, err := botAPI.Send(msg); err != nil {
				log.Panic(err)
			}
			continue
		}

		fillingStory, _ := stories[messageSenderId]
		fmt.Printf("fillingStory received=%s\n", fillingStory)
		var botState BotState
		var responseMessage string = ""

		if NewEntryButton.isSimilarTo(messageText) {
			fillingStory = &Story{}
			stories[messageSenderId] = fillingStory
		} else {
			botState = checkBotState(*fillingStory)
			fmt.Printf("fill!\n")
			switch botState {
			case botStateFillSituation:
				fillingStory.Situation = messageText
			case botStateFillMind:
				fillingStory.Mind = messageText
			case botStateFillEmotion:
				fillingStory.Emotion = messageText
			case botStateFillPower:
				var power int
				power, err = strconv.Atoi(messageText)
				if err != nil {
					responseMessage = "–Ø –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æüôÅ, —É–±–µ–¥–∏—Å—å —á—Ç–æ –æ–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ç 1 –¥–æ 10"
				} else {
					fillingStory.Power = uint8(power)
				}
			default:
			}
		}
		botState = checkBotState(*fillingStory)
		fmt.Printf("fillingStory result=%s\n", fillingStory)

		if responseMessage == "" {
			switch botState {
			case botStateFillSituation:
				responseMessage = "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?"
			case botStateFillMind:
				responseMessage = "–ß—Ç–æ —Ç—ã –ø–æ–¥—É–º–∞–ª –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç?"
			case botStateFillEmotion:
				responseMessage = "–ö–∞–∫—É—é —ç–º–æ—Ü–∏—é —Ç—ã –ø–æ—á—É—Å—Ç–≤–æ–≤–∞–ª?"
			case botStateFillPower:
				responseMessage = "–ù–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ –±—ã–ª–∞ —Å–∏–ª—å–Ω–∞ (–æ—Ç 1 –¥–æ 10)?"
			case botStateFilled:
				responseMessage = "–ó–∞–ø–∏—Å—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–πüòä " +
					"–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É"
				loadStory(fillingStory)
			}
		}

		if _, err := botAPI.Send(
			tg.NewMessage(messageChatId, responseMessage),
		); err != nil {
			log.Panic(err)
		}
	}
}

func loadStory(story *Story) {
	*story = Story{}
}
