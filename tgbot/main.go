package main

import (
	. "EnvironmentModule"
	. "StorageModule/models"
	"StorageModule/repo"
	"fmt"
	"gorm.io/gorm"
	"log"
	"strconv"

	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type BotInteract string

func (i BotInteract) isEqual(str string) bool {
	return string(i) == str
}
func (i BotInteract) toString() string {
	return string(i)
}

var StartCommandButton BotInteract = "start"
var NewEntryButton BotInteract = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å"

var messageGreating = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —Å–≤–æ–π –ö–ü–¢ –¥–Ω–µ–≤–Ω–∏–∫!"
var messageRegister = "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–æ—à–ª–∏ –º–Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–≤–æ–µ–≥–æ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞"
var messageRegisterComplete = "–ö—Ä—É—Ç–æ, —è —Ç–µ–±—è –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª! –ú–û–∂–µ—à—å –Ω–∞—á–∞—Ç—å –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"
var messageUserNotFound = "–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞!"
var messageDontRecognizeNumber = "–Ø –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æüôÅ, —É–±–µ–¥–∏—Å—å —á—Ç–æ –æ–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ç 1 –¥–æ 10"
var messageCantCreatePatient = "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑üòî"

var numericKeyboard = tg.NewReplyKeyboard(
	tg.NewKeyboardButtonRow(
		tg.NewKeyboardButton(NewEntryButton.toString()),
	),
)

func main() {
	botAPI, err := tg.NewBotAPI(Env.BOT_TOKEN)
	if err != nil {
		log.Fatal(err)
	}

	u := tg.NewUpdate(0)
	u.Timeout = 60

	updates := botAPI.GetUpdatesChan(u)

	stories := make(map[int64]*Story)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		messageCommand := update.Message.Command()
		messageText := update.Message.Text

		messageSender := update.Message.From
		messageSenderId := messageSender.ID
		messageSenderUserName := messageSender.UserName

		messageChatId := update.Message.Chat.ID

		log.Printf(
			"[%s, %d] %s",
			messageSenderUserName,
			messageSenderId,
			messageText,
		)

		sendMessage := func(msg tg.Chattable) error {
			if _, sendMessageErr := botAPI.Send(msg); sendMessageErr != nil {
				log.Panic(sendMessageErr)
				return sendMessageErr
			}
			return nil
		}

		createMessage := func(text string) tg.MessageConfig {
			return tg.NewMessage(messageChatId, text)
		}

		patient, patientErr := repo.GetPatientByTg(messageSenderId)

		if StartCommandButton.isEqual(messageCommand) {

			msg := createMessage(messageGreating)
			msg.ReplyMarkup = numericKeyboard
			if err = sendMessage(msg); err != nil {
				continue
			}

			if patientErr != nil {
				sendMessage(createMessage(messageRegister))
				continue
			}

		}

		if patientErr != nil {
			var user *User
			user, err = repo.GetUserByUsername(messageText)

			if err != nil {
				sendMessage(createMessage(messageUserNotFound))
				continue
			}

			patient = &Patient{
				BaseModel: BaseModel{
					Model: gorm.Model{},
				},
				Name:     messageSender.FirstName,
				LastName: messageSender.LastName,
				Email:    "",
				Username: messageSender.UserName,
				Password: "",
				UserId:   user.ID,
				TgId:     messageSenderId,
			}
			err = repo.CreatePatient(patient)
			if err != nil {
				_ = sendMessage(createMessage(messageCantCreatePatient))
				continue
			}
			_ = sendMessage(createMessage(messageRegisterComplete))
			continue
		}

		fillingStory, _ := stories[messageSenderId]
		fmt.Printf("fillingStory received=%s\n", fillingStory)
		var botState BotState
		var responseMessage string = ""

		if NewEntryButton.isEqual(messageText) {
			fillingStory = &Story{}
			stories[messageSenderId] = fillingStory
		} else {
			botState = checkBotState(*fillingStory)
			fmt.Printf("fill!\n")
			switch botState {
			case botStateFillSituation:
				fillingStory.Situation = messageText
			case botStateFillMind:
				fillingStory.Mind = messageText
			case botStateFillEmotion:
				fillingStory.Emotion = messageText
			case botStateFillPower:
				power, err := strconv.Atoi(messageText)
				if err != nil {
					sendMessage(createMessage(messageDontRecognizeNumber))
					continue
				}
				fillingStory.Power = uint8(power)
			default:
			}
		}
		botState = checkBotState(*fillingStory)
		fmt.Printf("fillingStory result=%s\n", fillingStory)

		switch botState {
		case botStateFillSituation:
			responseMessage = "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?"
		case botStateFillMind:
			responseMessage = "–ß—Ç–æ —Ç—ã –ø–æ–¥—É–º–∞–ª –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç?"
		case botStateFillEmotion:
			responseMessage = "–ö–∞–∫—É—é —ç–º–æ—Ü–∏—é —Ç—ã –ø–æ—á—É—Å—Ç–≤–æ–≤–∞–ª?"
		case botStateFillPower:
			responseMessage = "–ù–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ –±—ã–ª–∞ —Å–∏–ª—å–Ω–∞ (–æ—Ç 1 –¥–æ 10)?"
		case botStateFilled:
			responseMessage = "–ó–∞–ø–∏—Å—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–πüòä " +
				"–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É"
			loadStory(fillingStory)
		}

		err = sendMessage(createMessage(responseMessage))
	}
}

func loadStory(story *Story) {
	*story = Story{}
}
